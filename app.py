# -*- coding: utf-8 -*-
"""CET_College_finder_final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YL-ZnaUUeg5-bauid1wJQG1JWBSWGIgu
"""

import pandas as pd
import gradio as gr

# Load the data
df = pd.read_csv('/content/Structured_MHTCET_Cutoffs_with_validation.csv', encoding='cp1252')

# Convert all categories to strings and handle NaN values
df['category'] = df['category'].fillna('Not Specified').astype(str)
df['quota_type'] = df['quota_type'].fillna('Not Specified').astype(str)
df['branch_name'] = df['branch_name'].fillna('Not Specified').astype(str)

def create_html_table(results):
    html = """
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap');

        .results-container {
            font-family: 'Roboto', sans-serif;
            margin: 20px 0;
            padding: 25px;
            border-radius: 12px;
            background-color: #ffffff;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            width: 100%;
        }

        .results-header {
            font-size: 24px;
            font-weight: 500;
            color: #1a73e8;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #e8eaed;
        }

        .table-container {
            overflow-x: auto;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        table {
            border-collapse: separate;
            border-spacing: 0;
            width: 100%;
            min-width: 1200px;
            background-color: #ffffff;
        }

        th {
            background-color: #1a73e8;
            color: white;
            font-weight: 500;
            padding: 16px 12px;
            text-align: left;
            font-size: 14px;
            position: sticky;
            top: 0;
            z-index: 1;
        }

        td {
            padding: 14px 12px;
            font-size: 14px;
            border-bottom: 1px solid #e8eaed;
            color: #202124;
        }

        tr:hover td {
            background-color: #f8f9fa;
        }

        .disclaimer {
            margin-top: 20px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 8px;
            color: #5f6368;
            font-size: 13px;
            font-style: italic;
            line-height: 1.5;
            text-align: center;
        }

        .warning-icon {
            color: #f29900;
            margin-right: 8px;
        }

        .no-results {
            padding: 40px;
            text-align: center;
            color: #5f6368;
            font-size: 16px;
            background-color: #f8f9fa;
            border-radius: 8px;
            margin: 20px 0;
        }

        .stats-container {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .stat-card {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            flex: 1;
            min-width: 200px;
            text-align: center;
        }

        .stat-label {
            color: #5f6368;
            font-size: 13px;
            margin-bottom: 5px;
        }

        .stat-value {
            color: #1a73e8;
            font-size: 18px;
            font-weight: 500;
        }
    </style>
    """

    html += f"""
    <div class="results-container">
        <div class="results-header">College Search Results</div>

        <div class="stats-container">
            <div class="stat-card">
                <div class="stat-label">Total Matches</div>
                <div class="stat-value">{len(results)}</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Rank Range</div>
                <div class="stat-value">{results['rank'].min():,} - {results['rank'].max():,}</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Unique Colleges</div>
                <div class="stat-value">{results['college_name'].nunique()}</div>
            </div>
        </div>

        <div class="table-container">
            <table>
                <tr>
                    <th>College Code</th>
                    <th>College Name</th>
                    <th>Branch Code</th>
                    <th>Branch Name</th>
                    <th>Category Code</th>
                    <th>Category</th>
                    <th>Quota Type</th>
                    <th>Allocation Type</th>
                    <th>Rank</th>
                    <th>Percentile</th>
                </tr>
    """

    for _, row in results.iterrows():
        html += f"""
        <tr>
            <td>{row['college_code']}</td>
            <td>{row['college_name']}</td>
            <td>{row['branch_code']}</td>
            <td>{row['branch_name']}</td>
            <td>{row['category_code']}</td>
            <td>{row['category']}</td>
            <td>{row['quota_type']}</td>
            <td>{row['allocation_type']}</td>
            <td>{row['rank']:,}</td>
            <td>{row['percentile']}</td>
        </tr>
        """

    html += """
            </table>
        </div>
        <div class="disclaimer">
            <span class="warning-icon">⚠️</span>
            Disclaimer: The above data is for reference purposes only. Actual cutoff ranks may vary based on various factors
            including seat availability, number of applications, and other admission criteria. Please verify the information
            from official sources before making any decisions.
        </div>
    </div>
    """
    return html

def find_colleges(rank, category=None, quota=None, branch=None):
    try:
        if not rank:
            return """
            <div class="results-container">
                <div class="no-results">
                    <p>Please enter your rank to search for colleges.</p>
                </div>
            </div>
            """

        rank = int(rank)
        if rank <= 0:
            return """
            <div class="results-container">
                <div class="no-results">
                    <p>Please enter a valid rank (greater than 0).</p>
                </div>
            </div>
            """

        mask = (df['rank'] >= rank - 1000) & (df['rank'] <= rank + 1000)

        if category and category != "All":
            mask &= df['category'] == category
        if quota and quota != "All":
            mask &= df['quota_type'] == quota
        if branch and branch != "All":
            mask &= df['branch_name'] == branch

        results = df[mask].sort_values('rank')

        if len(results) == 0:
            return """
            <div class="results-container">
                <div class="no-results">
                    <p>No colleges found matching your criteria.</p>
                    <p>Try adjusting your search parameters.</p>
                </div>
            </div>
            """

        return create_html_table(results)

    except Exception as e:
        return f"""
        <div class="results-container">
            <div class="no-results">
                <p>An error occurred: {str(e)}</p>
                <p>Please try again with valid inputs.</p>
            </div>
        </div>
        """

# Get unique values
categories = ["All"] + sorted([str(x) for x in df['category'].unique() if str(x) != 'nan' and str(x) != 'Not Specified'])
quotas = ["All"] + sorted([str(x) for x in df['quota_type'].unique() if str(x) != 'nan' and str(x) != 'Not Specified'])
branches = ["All"] + sorted([str(x) for x in df['branch_name'].unique() if str(x) != 'nan' and str(x) != 'Not Specified'])

# Create the interface with blocks
with gr.Blocks(theme=gr.themes.Soft()) as iface:
    gr.Markdown(
        """
        # MHTCET 2025 College Finder
        Enter your rank and preferences to find matching colleges within ±1000 ranks.
        """
    )

    with gr.Row():
        with gr.Column():
            rank_input = gr.Number(
                label="Enter your MHTCET 2025 Rank",
                minimum=1
            )
            category_input = gr.Dropdown(
                choices=categories,
                label="Select Category",
                value="All"
            )
            quota_input = gr.Dropdown(
                choices=quotas,
                label="Select Quota Type",
                value="All"
            )
            branch_input = gr.Dropdown(
                choices=branches,
                label="Select Branch",
                value="All"
            )

            search_button = gr.Button(
                "Search Colleges",
                variant="primary"
            )

    output = gr.HTML()

    search_button.click(
        fn=find_colleges,
        inputs=[rank_input, category_input, quota_input, branch_input],
        outputs=output
    )

# Launch the interface
iface.launch(share=True)
